package main

import (
	"rpucella.net/ragnarok/internal/primitives"
	"rpucella.net/ragnarok/internal/ragnarok"
)

func initializeCore(eco ragnarok.Ecosystem) {

	env := eco.CreateModule("core")
	env.Update("type", primitives.PrimType)
	env.Update("+", primitives.PrimPlus)
	env.Update("*", primitives.PrimTimes)
	env.Update("-", primitives.PrimMinus)
	env.Update("=", primitives.PrimEqual)
	env.Update("<", primitives.PrimLess)
	env.Update("<=", primitives.PrimLessEqual)
	env.Update(">", primitives.PrimMore)
	env.Update(">=", primitives.PrimMoreEqual)
	env.Update("not", primitives.PrimNot)
	env.Update("string-append", primitives.PrimStringAppend)
	env.Update("string-length", primitives.PrimStringLength)
	env.Update("string-lower", primitives.PrimStringLower)
	env.Update("string-upper", primitives.PrimStringUpper)
	env.Update("string-substring", primitives.PrimStringSubstring)
	env.Update("apply", primitives.PrimApply)
	env.Update("cons", primitives.PrimCons)
	env.Update("append", primitives.PrimAppend)
	env.Update("reverse", primitives.PrimReverse)
	env.Update("head", primitives.PrimHead)
	env.Update("tail", primitives.PrimTail)
	env.Update("list", primitives.PrimList)
	env.Update("length", primitives.PrimLength)
	env.Update("nth", primitives.PrimNth)
	env.Update("map", primitives.PrimMap)
	env.Update("for", primitives.PrimFor)
	env.Update("filter", primitives.PrimFilter)
	env.Update("foldr", primitives.PrimFoldr)
	env.Update("foldl", primitives.PrimFoldl)
	env.Update("ref", primitives.PrimRef)
	env.Update("get", primitives.PrimGet)
	env.Update("set!", primitives.PrimSet)
	env.Update("empty?", primitives.PrimEmptyP)
	env.Update("cons?", primitives.PrimConsP)
	env.Update("list?", primitives.PrimListP)
	env.Update("number?", primitives.PrimNumberP)
	env.Update("ref?", primitives.PrimRefP)
	env.Update("boolean?", primitives.PrimBooleanP)
	env.Update("string?", primitives.PrimStringP)
	env.Update("symbol?", primitives.PrimSymbolP)
	env.Update("function?", primitives.PrimFunctionP)
	env.Update("nil?", primitives.PrimNilP)
	env.Update("array", primitives.PrimArray)
	env.Update("array?", primitives.PrimArrayP)
	env.Update("dict", primitives.PrimDict)
	env.Update("dict?", primitives.PrimDictP)
}
